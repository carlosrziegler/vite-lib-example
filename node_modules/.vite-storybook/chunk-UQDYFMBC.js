import {
  require_string_trim,
  require_this_number_value
} from "./chunk-ZUNZSUNP.js";
import {
  require_array_slice_simple,
  require_inherit_if_required
} from "./chunk-MYJXNO5K.js";
import {
  require_define_built_in,
  require_descriptors,
  require_fails,
  require_function_uncurry_this,
  require_global,
  require_has_own_property,
  require_is_forced,
  require_is_symbol,
  require_object_define_property,
  require_object_get_own_property_descriptor,
  require_object_get_own_property_names,
  require_object_is_prototype_of,
  require_to_primitive
} from "./chunk-L4GB7WNN.js";
import {
  __commonJS,
  __esm,
  init_define_import_meta_env
} from "./chunk-63WBANMH.js";

// node_modules/core-js/modules/es.number.constructor.js
var DESCRIPTORS, global, uncurryThis, isForced, defineBuiltIn, hasOwn, inheritIfRequired, isPrototypeOf, isSymbol, toPrimitive, fails, getOwnPropertyNames, getOwnPropertyDescriptor, defineProperty, thisNumberValue, trim, NUMBER, NativeNumber, NumberPrototype, TypeError, arraySlice, charCodeAt, toNumeric, toNumber, NumberWrapper, keys, j, key;
var init_es_number_constructor = __esm({
  "node_modules/core-js/modules/es.number.constructor.js"() {
    "use strict";
    init_define_import_meta_env();
    DESCRIPTORS = require_descriptors();
    global = require_global();
    uncurryThis = require_function_uncurry_this();
    isForced = require_is_forced();
    defineBuiltIn = require_define_built_in();
    hasOwn = require_has_own_property();
    inheritIfRequired = require_inherit_if_required();
    isPrototypeOf = require_object_is_prototype_of();
    isSymbol = require_is_symbol();
    toPrimitive = require_to_primitive();
    fails = require_fails();
    getOwnPropertyNames = require_object_get_own_property_names().f;
    getOwnPropertyDescriptor = require_object_get_own_property_descriptor().f;
    defineProperty = require_object_define_property().f;
    thisNumberValue = require_this_number_value();
    trim = require_string_trim().trim;
    NUMBER = "Number";
    NativeNumber = global[NUMBER];
    NumberPrototype = NativeNumber.prototype;
    TypeError = global.TypeError;
    arraySlice = uncurryThis("".slice);
    charCodeAt = uncurryThis("".charCodeAt);
    toNumeric = function(value) {
      var primValue = toPrimitive(value, "number");
      return typeof primValue == "bigint" ? primValue : toNumber(primValue);
    };
    toNumber = function(argument) {
      var it = toPrimitive(argument, "number");
      var first, third, radix, maxCode, digits, length, index, code;
      if (isSymbol(it))
        throw TypeError("Cannot convert a Symbol value to a number");
      if (typeof it == "string" && it.length > 2) {
        it = trim(it);
        first = charCodeAt(it, 0);
        if (first === 43 || first === 45) {
          third = charCodeAt(it, 2);
          if (third === 88 || third === 120)
            return NaN;
        } else if (first === 48) {
          switch (charCodeAt(it, 1)) {
            case 66:
            case 98:
              radix = 2;
              maxCode = 49;
              break;
            case 79:
            case 111:
              radix = 8;
              maxCode = 55;
              break;
            default:
              return +it;
          }
          digits = arraySlice(it, 2);
          length = digits.length;
          for (index = 0; index < length; index++) {
            code = charCodeAt(digits, index);
            if (code < 48 || code > maxCode)
              return NaN;
          }
          return parseInt(digits, radix);
        }
      }
      return +it;
    };
    if (isForced(NUMBER, !NativeNumber(" 0o1") || !NativeNumber("0b1") || NativeNumber("+0x1"))) {
      NumberWrapper = function Number(value) {
        var n = arguments.length < 1 ? 0 : NativeNumber(toNumeric(value));
        var dummy = this;
        return isPrototypeOf(NumberPrototype, dummy) && fails(function() {
          thisNumberValue(dummy);
        }) ? inheritIfRequired(Object(n), dummy, NumberWrapper) : n;
      };
      for (keys = DESCRIPTORS ? getOwnPropertyNames(NativeNumber) : "MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,isFinite,isInteger,isNaN,isSafeInteger,parseFloat,parseInt,fromString,range".split(","), j = 0; keys.length > j; j++) {
        if (hasOwn(NativeNumber, key = keys[j]) && !hasOwn(NumberWrapper, key)) {
          defineProperty(NumberWrapper, key, getOwnPropertyDescriptor(NativeNumber, key));
        }
      }
      NumberWrapper.prototype = NumberPrototype;
      NumberPrototype.constructor = NumberWrapper;
      defineBuiltIn(global, NUMBER, NumberWrapper, { constructor: true });
    }
  }
});

// node_modules/core-js/internals/array-sort.js
var require_array_sort = __commonJS({
  "node_modules/core-js/internals/array-sort.js"(exports, module) {
    init_define_import_meta_env();
    var arraySlice2 = require_array_slice_simple();
    var floor = Math.floor;
    var mergeSort = function(array, comparefn) {
      var length = array.length;
      var middle = floor(length / 2);
      return length < 8 ? insertionSort(array, comparefn) : merge(
        array,
        mergeSort(arraySlice2(array, 0, middle), comparefn),
        mergeSort(arraySlice2(array, middle), comparefn),
        comparefn
      );
    };
    var insertionSort = function(array, comparefn) {
      var length = array.length;
      var i = 1;
      var element, j;
      while (i < length) {
        j = i;
        element = array[i];
        while (j && comparefn(array[j - 1], element) > 0) {
          array[j] = array[--j];
        }
        if (j !== i++)
          array[j] = element;
      }
      return array;
    };
    var merge = function(array, left, right, comparefn) {
      var llength = left.length;
      var rlength = right.length;
      var lindex = 0;
      var rindex = 0;
      while (lindex < llength || rindex < rlength) {
        array[lindex + rindex] = lindex < llength && rindex < rlength ? comparefn(left[lindex], right[rindex]) <= 0 ? left[lindex++] : right[rindex++] : lindex < llength ? left[lindex++] : right[rindex++];
      }
      return array;
    };
    module.exports = mergeSort;
  }
});

export {
  init_es_number_constructor,
  require_array_sort
};
//# sourceMappingURL=chunk-UQDYFMBC.js.map
