import {
  require_startCase
} from "./chunk-D63MQTKO.js";
import {
  __commonJS,
  init_define_import_meta_env
} from "./chunk-63WBANMH.js";

// node_modules/@storybook/csf/dist/SBType.js
var require_SBType = __commonJS({
  "node_modules/@storybook/csf/dist/SBType.js"() {
    "use strict";
    init_define_import_meta_env();
  }
});

// node_modules/@storybook/csf/dist/story.js
var require_story = __commonJS({
  "node_modules/@storybook/csf/dist/story.js"(exports) {
    "use strict";
    init_define_import_meta_env();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _SBType = require_SBType();
    Object.keys(_SBType).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function get() {
          return _SBType[key];
        }
      });
    });
  }
});

// node_modules/@storybook/csf/dist/index.js
var require_dist = __commonJS({
  "node_modules/@storybook/csf/dist/index.js"(exports) {
    "use strict";
    init_define_import_meta_env();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _exportNames = {
      sanitize: true,
      toId: true,
      storyNameFromExport: true,
      isExportStory: true,
      parseKind: true,
      includeConditionalArg: true
    };
    exports.isExportStory = isExportStory;
    exports.includeConditionalArg = exports.parseKind = exports.storyNameFromExport = exports.toId = exports.sanitize = void 0;
    var _startCase = _interopRequireDefault(require_startCase());
    var _story = require_story();
    Object.keys(_story).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key))
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function get() {
          return _story[key];
        }
      });
    });
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _slicedToArray(arr, i) {
      return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
    }
    function _nonIterableRest() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _unsupportedIterableToArray(o, minLen) {
      if (!o)
        return;
      if (typeof o === "string")
        return _arrayLikeToArray(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if (n === "Object" && o.constructor)
        n = o.constructor.name;
      if (n === "Map" || n === "Set")
        return Array.from(n);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
        return _arrayLikeToArray(o, minLen);
    }
    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length)
        len = arr.length;
      for (var i = 0, arr2 = new Array(len); i < len; i++) {
        arr2[i] = arr[i];
      }
      return arr2;
    }
    function _iterableToArrayLimit(arr, i) {
      if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr)))
        return;
      var _arr = [];
      var _n = true;
      var _d = false;
      var _e = void 0;
      try {
        for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);
          if (i && _arr.length === i)
            break;
        }
      } catch (err) {
        _d = true;
        _e = err;
      } finally {
        try {
          if (!_n && _i["return"] != null)
            _i["return"]();
        } finally {
          if (_d)
            throw _e;
        }
      }
      return _arr;
    }
    function _arrayWithHoles(arr) {
      if (Array.isArray(arr))
        return arr;
    }
    var sanitize = function sanitize2(string) {
      return string.toLowerCase().replace(/[ ’–—―′¿'`~!@#$%^&*()_|+\-=?;:'",.<>\{\}\[\]\\\/]/gi, "-").replace(/-+/g, "-").replace(/^-+/, "").replace(/-+$/, "");
    };
    exports.sanitize = sanitize;
    var sanitizeSafe = function sanitizeSafe2(string, part) {
      var sanitized = sanitize(string);
      if (sanitized === "") {
        throw new Error("Invalid ".concat(part, " '").concat(string, "', must include alphanumeric characters"));
      }
      return sanitized;
    };
    var toId = function toId2(kind, name) {
      return "".concat(sanitizeSafe(kind, "kind")).concat(name ? "--".concat(sanitizeSafe(name, "name")) : "");
    };
    exports.toId = toId;
    var storyNameFromExport = function storyNameFromExport2(key) {
      return (0, _startCase["default"])(key);
    };
    exports.storyNameFromExport = storyNameFromExport;
    function matches(storyKey, arrayOrRegex) {
      if (Array.isArray(arrayOrRegex)) {
        return arrayOrRegex.includes(storyKey);
      }
      return storyKey.match(arrayOrRegex);
    }
    function isExportStory(key, _ref) {
      var includeStories = _ref.includeStories, excludeStories = _ref.excludeStories;
      return key !== "__esModule" && (!includeStories || matches(key, includeStories)) && (!excludeStories || !matches(key, excludeStories));
    }
    var parseKind = function parseKind2(kind, _ref2) {
      var rootSeparator = _ref2.rootSeparator, groupSeparator = _ref2.groupSeparator;
      var _kind$split = kind.split(rootSeparator, 2), _kind$split2 = _slicedToArray(_kind$split, 2), root = _kind$split2[0], remainder = _kind$split2[1];
      var groups = (remainder || kind).split(groupSeparator).filter(function(i) {
        return !!i;
      });
      return {
        root: remainder ? root : null,
        groups
      };
    };
    exports.parseKind = parseKind;
    var includeConditionalArg = function includeConditionalArg2(argType, args) {
      var addIf = argType.addIf, removeIf = argType.removeIf;
      if (addIf)
        return !!args[addIf];
      if (removeIf)
        return !args[removeIf];
      return true;
    };
    exports.includeConditionalArg = includeConditionalArg;
  }
});

export {
  require_dist
};
//# sourceMappingURL=chunk-ETISVMUQ.js.map
