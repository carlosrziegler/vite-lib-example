import {
  require_runtime
} from "./chunk-CVHW5ARR.js";
import {
  init_es_promise
} from "./chunk-W7T2CIIB.js";
import "./chunk-YGWNZ64L.js";
import "./chunk-4YRUZNYU.js";
import "./chunk-YWOZGKFB.js";
import {
  init_es_object_to_string
} from "./chunk-7XJ24U6U.js";
import {
  __toESM
} from "./chunk-MF7N2UXY.js";

// node_modules/@storybook/addon-docs/dist/esm/preview.js
var import_runtime = __toESM(require_runtime());
init_es_object_to_string();
init_es_promise();
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }
  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}
function _asyncToGenerator(fn) {
  return function() {
    var self = this, args = arguments;
    return new Promise(function(resolve, reject) {
      var gen = fn.apply(self, args);
      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }
      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }
      _next(void 0);
    });
  };
}
var parameters = {
  docs: {
    getContainer: function() {
      var _getContainer = _asyncToGenerator(regeneratorRuntime.mark(function _callee() {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return import("./blocks-AHEPR46X.js");
              case 2:
                return _context.abrupt("return", _context.sent.DocsContainer);
              case 3:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));
      function getContainer() {
        return _getContainer.apply(this, arguments);
      }
      return getContainer;
    }(),
    getPage: function() {
      var _getPage = _asyncToGenerator(regeneratorRuntime.mark(function _callee2() {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return import("./blocks-AHEPR46X.js");
              case 2:
                return _context2.abrupt("return", _context2.sent.DocsPage);
              case 3:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));
      function getPage() {
        return _getPage.apply(this, arguments);
      }
      return getPage;
    }()
  }
};
export {
  parameters
};
//# sourceMappingURL=@storybook_addon-docs_preview__js.js.map
