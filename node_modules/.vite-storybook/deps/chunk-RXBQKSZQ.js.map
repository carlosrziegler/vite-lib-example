{
  "version": 3,
  "sources": ["../../core-js/modules/es.number.constructor.js"],
  "sourcesContent": ["'use strict';\nvar DESCRIPTORS = require('../internals/descriptors');\nvar global = require('../internals/global');\nvar uncurryThis = require('../internals/function-uncurry-this');\nvar isForced = require('../internals/is-forced');\nvar defineBuiltIn = require('../internals/define-built-in');\nvar hasOwn = require('../internals/has-own-property');\nvar inheritIfRequired = require('../internals/inherit-if-required');\nvar isPrototypeOf = require('../internals/object-is-prototype-of');\nvar isSymbol = require('../internals/is-symbol');\nvar toPrimitive = require('../internals/to-primitive');\nvar fails = require('../internals/fails');\nvar getOwnPropertyNames = require('../internals/object-get-own-property-names').f;\nvar getOwnPropertyDescriptor = require('../internals/object-get-own-property-descriptor').f;\nvar defineProperty = require('../internals/object-define-property').f;\nvar thisNumberValue = require('../internals/this-number-value');\nvar trim = require('../internals/string-trim').trim;\n\nvar NUMBER = 'Number';\nvar NativeNumber = global[NUMBER];\nvar NumberPrototype = NativeNumber.prototype;\nvar TypeError = global.TypeError;\nvar arraySlice = uncurryThis(''.slice);\nvar charCodeAt = uncurryThis(''.charCodeAt);\n\n// `ToNumeric` abstract operation\n// https://tc39.es/ecma262/#sec-tonumeric\nvar toNumeric = function (value) {\n  var primValue = toPrimitive(value, 'number');\n  return typeof primValue == 'bigint' ? primValue : toNumber(primValue);\n};\n\n// `ToNumber` abstract operation\n// https://tc39.es/ecma262/#sec-tonumber\nvar toNumber = function (argument) {\n  var it = toPrimitive(argument, 'number');\n  var first, third, radix, maxCode, digits, length, index, code;\n  if (isSymbol(it)) throw TypeError('Cannot convert a Symbol value to a number');\n  if (typeof it == 'string' && it.length > 2) {\n    it = trim(it);\n    first = charCodeAt(it, 0);\n    if (first === 43 || first === 45) {\n      third = charCodeAt(it, 2);\n      if (third === 88 || third === 120) return NaN; // Number('+0x1') should be NaN, old V8 fix\n    } else if (first === 48) {\n      switch (charCodeAt(it, 1)) {\n        case 66: case 98: radix = 2; maxCode = 49; break; // fast equal of /^0b[01]+$/i\n        case 79: case 111: radix = 8; maxCode = 55; break; // fast equal of /^0o[0-7]+$/i\n        default: return +it;\n      }\n      digits = arraySlice(it, 2);\n      length = digits.length;\n      for (index = 0; index < length; index++) {\n        code = charCodeAt(digits, index);\n        // parseInt parses a string to a first unavailable symbol\n        // but ToNumber should return NaN if a string contains unavailable symbols\n        if (code < 48 || code > maxCode) return NaN;\n      } return parseInt(digits, radix);\n    }\n  } return +it;\n};\n\n// `Number` constructor\n// https://tc39.es/ecma262/#sec-number-constructor\nif (isForced(NUMBER, !NativeNumber(' 0o1') || !NativeNumber('0b1') || NativeNumber('+0x1'))) {\n  var NumberWrapper = function Number(value) {\n    var n = arguments.length < 1 ? 0 : NativeNumber(toNumeric(value));\n    var dummy = this;\n    // check on 1..constructor(foo) case\n    return isPrototypeOf(NumberPrototype, dummy) && fails(function () { thisNumberValue(dummy); })\n      ? inheritIfRequired(Object(n), dummy, NumberWrapper) : n;\n  };\n  for (var keys = DESCRIPTORS ? getOwnPropertyNames(NativeNumber) : (\n    // ES3:\n    'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' +\n    // ES2015 (in case, if modules with ES2015 Number statics required before):\n    'EPSILON,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,isFinite,isInteger,isNaN,isSafeInteger,parseFloat,parseInt,' +\n    // ESNext\n    'fromString,range'\n  ).split(','), j = 0, key; keys.length > j; j++) {\n    if (hasOwn(NativeNumber, key = keys[j]) && !hasOwn(NumberWrapper, key)) {\n      defineProperty(NumberWrapper, key, getOwnPropertyDescriptor(NativeNumber, key));\n    }\n  }\n  NumberWrapper.prototype = NumberPrototype;\n  NumberPrototype.constructor = NumberWrapper;\n  defineBuiltIn(global, NUMBER, NumberWrapper, { constructor: true });\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;AACA,IAAI,cAAc;AAClB,IAAI,SAAS;AACb,IAAI,cAAc;AAClB,IAAI,WAAW;AACf,IAAI,gBAAgB;AACpB,IAAI,SAAS;AACb,IAAI,oBAAoB;AACxB,IAAI,gBAAgB;AACpB,IAAI,WAAW;AACf,IAAI,cAAc;AAClB,IAAI,QAAQ;AACZ,IAAI,sBAAsB,wCAAsD;AAChF,IAAI,2BAA2B,6CAA2D;AAC1F,IAAI,iBAAiB,iCAA+C;AACpE,IAAI,kBAAkB;AACtB,IAAI,OAAO,sBAAoC;AAE/C,IAAI,SAAS;AACb,IAAI,eAAe,OAAO;AAC1B,IAAI,kBAAkB,aAAa;AACnC,IAAI,YAAY,OAAO;AACvB,IAAI,aAAa,YAAY,GAAG,KAAK;AACrC,IAAI,aAAa,YAAY,GAAG,UAAU;AAI1C,IAAI,YAAY,SAAU,OAAO;AAC/B,MAAI,YAAY,YAAY,OAAO,QAAQ;AAC3C,SAAO,OAAO,aAAa,WAAW,YAAY,SAAS,SAAS;AACtE;AAIA,IAAI,WAAW,SAAU,UAAU;AACjC,MAAI,KAAK,YAAY,UAAU,QAAQ;AACvC,MAAI,OAAO,OAAO,OAAO,SAAS,QAAQ,QAAQ,OAAO;AACzD,MAAI,SAAS,EAAE;AAAG,UAAM,UAAU,2CAA2C;AAC7E,MAAI,OAAO,MAAM,YAAY,GAAG,SAAS,GAAG;AAC1C,SAAK,KAAK,EAAE;AACZ,YAAQ,WAAW,IAAI,CAAC;AACxB,QAAI,UAAU,MAAM,UAAU,IAAI;AAChC,cAAQ,WAAW,IAAI,CAAC;AACxB,UAAI,UAAU,MAAM,UAAU;AAAK,eAAO;AAAA,IAC5C,WAAW,UAAU,IAAI;AACvB,cAAQ,WAAW,IAAI,CAAC;AAAA,aACjB;AAAA,aAAS;AAAI,kBAAQ;AAAG,oBAAU;AAAI;AAAA,aACtC;AAAA,aAAS;AAAK,kBAAQ;AAAG,oBAAU;AAAI;AAAA;AACnC,iBAAO,CAAC;AAAA;AAEnB,eAAS,WAAW,IAAI,CAAC;AACzB,eAAS,OAAO;AAChB,WAAK,QAAQ,GAAG,QAAQ,QAAQ,SAAS;AACvC,eAAO,WAAW,QAAQ,KAAK;AAG/B,YAAI,OAAO,MAAM,OAAO;AAAS,iBAAO;AAAA,MAC1C;AAAE,aAAO,SAAS,QAAQ,KAAK;AAAA,IACjC;AAAA,EACF;AAAE,SAAO,CAAC;AACZ;AAIA,IAAI,SAAS,QAAQ,CAAC,aAAa,MAAM,KAAK,CAAC,aAAa,KAAK,KAAK,aAAa,MAAM,CAAC,GAAG;AACvF,kBAAgB,SAAS,OAAO,OAAO;AACzC,QAAI,IAAI,UAAU,SAAS,IAAI,IAAI,aAAa,UAAU,KAAK,CAAC;AAChE,QAAI,QAAQ;AAEZ,WAAO,cAAc,iBAAiB,KAAK,KAAK,MAAM,WAAY;AAAE,sBAAgB,KAAK;AAAA,IAAG,CAAC,IACzF,kBAAkB,OAAO,CAAC,GAAG,OAAO,aAAa,IAAI;AAAA,EAC3D;AACA,OAAS,OAAO,cAAc,oBAAoB,YAAY,IAE5D,oLAKA,MAAM,GAAG,GAAG,IAAI,GAAQ,KAAK,SAAS,GAAG,KAAK;AAC9C,QAAI,OAAO,cAAc,MAAM,KAAK,EAAE,KAAK,CAAC,OAAO,eAAe,GAAG,GAAG;AACtE,qBAAe,eAAe,KAAK,yBAAyB,cAAc,GAAG,CAAC;AAAA,IAChF;AAAA,EACF;AACA,gBAAc,YAAY;AAC1B,kBAAgB,cAAc;AAC9B,gBAAc,QAAQ,QAAQ,eAAe,EAAE,aAAa,KAAK,CAAC;AACpE;AAtBM;AAOK;AAOK;AAAO;",
  "names": []
}
