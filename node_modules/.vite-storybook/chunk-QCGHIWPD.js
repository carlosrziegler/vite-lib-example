import {
  require_correct_is_regexp_logic,
  require_not_a_regexp
} from "./chunk-JNJVKBIS.js";
import {
  require_to_string
} from "./chunk-MYJXNO5K.js";
import {
  require_export,
  require_function_uncurry_this,
  require_is_pure,
  require_object_get_own_property_descriptor,
  require_require_object_coercible,
  require_to_length
} from "./chunk-L4GB7WNN.js";
import {
  __esm,
  init_define_import_meta_env
} from "./chunk-63WBANMH.js";

// node_modules/core-js/modules/es.string.ends-with.js
var $, uncurryThis, getOwnPropertyDescriptor, toLength, toString, notARegExp, requireObjectCoercible, correctIsRegExpLogic, IS_PURE, nativeEndsWith, slice, min, CORRECT_IS_REGEXP_LOGIC, MDN_POLYFILL_BUG;
var init_es_string_ends_with = __esm({
  "node_modules/core-js/modules/es.string.ends-with.js"() {
    "use strict";
    init_define_import_meta_env();
    $ = require_export();
    uncurryThis = require_function_uncurry_this();
    getOwnPropertyDescriptor = require_object_get_own_property_descriptor().f;
    toLength = require_to_length();
    toString = require_to_string();
    notARegExp = require_not_a_regexp();
    requireObjectCoercible = require_require_object_coercible();
    correctIsRegExpLogic = require_correct_is_regexp_logic();
    IS_PURE = require_is_pure();
    nativeEndsWith = uncurryThis("".endsWith);
    slice = uncurryThis("".slice);
    min = Math.min;
    CORRECT_IS_REGEXP_LOGIC = correctIsRegExpLogic("endsWith");
    MDN_POLYFILL_BUG = !IS_PURE && !CORRECT_IS_REGEXP_LOGIC && !!function() {
      var descriptor = getOwnPropertyDescriptor(String.prototype, "endsWith");
      return descriptor && !descriptor.writable;
    }();
    $({ target: "String", proto: true, forced: !MDN_POLYFILL_BUG && !CORRECT_IS_REGEXP_LOGIC }, {
      endsWith: function endsWith(searchString) {
        var that = toString(requireObjectCoercible(this));
        notARegExp(searchString);
        var endPosition = arguments.length > 1 ? arguments[1] : void 0;
        var len = that.length;
        var end = endPosition === void 0 ? len : min(toLength(endPosition), len);
        var search = toString(searchString);
        return nativeEndsWith ? nativeEndsWith(that, search, end) : slice(that, end - search.length, end) === search;
      }
    });
  }
});

export {
  init_es_string_ends_with
};
//# sourceMappingURL=chunk-QCGHIWPD.js.map
