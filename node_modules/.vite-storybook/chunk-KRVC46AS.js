import {
  init_web_immediate
} from "./chunk-47AYDWDR.js";
import {
  esm_default,
  init_esm
} from "./chunk-AGDQOUL7.js";
import {
  require_browser
} from "./chunk-NHJEIV3I.js";
import {
  init_es_array_filter,
  init_es_array_slice,
  init_es_object_freeze,
  init_es_object_keys,
  init_es_regexp_to_string,
  init_web_dom_collections_for_each
} from "./chunk-3JN5YVZI.js";
import {
  init_es_object_to_string
} from "./chunk-L4GB7WNN.js";
import {
  __esm,
  __toESM,
  init_define_import_meta_env
} from "./chunk-63WBANMH.js";

// node_modules/@storybook/channels/dist/esm/index.js
function _taggedTemplateLiteral(strings, raw) {
  if (!raw) {
    raw = strings.slice(0);
  }
  return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } }));
}
function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", { writable: false });
  return Constructor;
}
var import_util_deprecate, _templateObject, generateRandomId, Channel, esm_default2;
var init_esm2 = __esm({
  "node_modules/@storybook/channels/dist/esm/index.js"() {
    init_define_import_meta_env();
    init_es_object_freeze();
    init_es_array_slice();
    init_es_object_to_string();
    init_es_regexp_to_string();
    init_web_immediate();
    init_es_object_keys();
    init_es_array_filter();
    init_web_dom_collections_for_each();
    import_util_deprecate = __toESM(require_browser());
    init_esm();
    generateRandomId = function generateRandomId2() {
      return Math.random().toString(16).slice(2);
    };
    Channel = function() {
      function Channel2() {
        var _this = this;
        var _ref = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, transport = _ref.transport, _ref$async = _ref.async, async = _ref$async === void 0 ? false : _ref$async;
        _classCallCheck(this, Channel2);
        this.isAsync = void 0;
        this.sender = generateRandomId();
        this.events = {};
        this.data = {};
        this.transport = void 0;
        this.addPeerListener = (0, import_util_deprecate.default)(function(eventName, listener) {
          _this.addListener(eventName, listener);
        }, esm_default(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n      channel.addPeerListener is deprecated\n    "]))));
        this.isAsync = async;
        if (transport) {
          this.transport = transport;
          this.transport.setHandler(function(event) {
            return _this.handleEvent(event);
          });
        }
      }
      _createClass(Channel2, [{
        key: "hasTransport",
        get: function get() {
          return !!this.transport;
        }
      }, {
        key: "addListener",
        value: function addListener(eventName, listener) {
          this.events[eventName] = this.events[eventName] || [];
          this.events[eventName].push(listener);
        }
      }, {
        key: "emit",
        value: function emit(eventName) {
          var _this2 = this;
          for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            args[_key - 1] = arguments[_key];
          }
          var event = {
            type: eventName,
            args,
            from: this.sender
          };
          var options = {};
          if (args.length >= 1 && args[0] && args[0].options) {
            options = args[0].options;
          }
          var handler = function handler2() {
            if (_this2.transport) {
              _this2.transport.send(event, options);
            }
            _this2.handleEvent(event);
          };
          if (this.isAsync) {
            setImmediate(handler);
          } else {
            handler();
          }
        }
      }, {
        key: "last",
        value: function last(eventName) {
          return this.data[eventName];
        }
      }, {
        key: "eventNames",
        value: function eventNames() {
          return Object.keys(this.events);
        }
      }, {
        key: "listenerCount",
        value: function listenerCount(eventName) {
          var listeners = this.listeners(eventName);
          return listeners ? listeners.length : 0;
        }
      }, {
        key: "listeners",
        value: function listeners(eventName) {
          var listeners2 = this.events[eventName];
          return listeners2 || void 0;
        }
      }, {
        key: "once",
        value: function once(eventName, listener) {
          var onceListener = this.onceListener(eventName, listener);
          this.addListener(eventName, onceListener);
        }
      }, {
        key: "removeAllListeners",
        value: function removeAllListeners(eventName) {
          if (!eventName) {
            this.events = {};
          } else if (this.events[eventName]) {
            delete this.events[eventName];
          }
        }
      }, {
        key: "removeListener",
        value: function removeListener(eventName, listener) {
          var listeners = this.listeners(eventName);
          if (listeners) {
            this.events[eventName] = listeners.filter(function(l) {
              return l !== listener;
            });
          }
        }
      }, {
        key: "on",
        value: function on(eventName, listener) {
          this.addListener(eventName, listener);
        }
      }, {
        key: "off",
        value: function off(eventName, listener) {
          this.removeListener(eventName, listener);
        }
      }, {
        key: "handleEvent",
        value: function handleEvent(event) {
          var listeners = this.listeners(event.type);
          if (listeners && listeners.length) {
            listeners.forEach(function(fn) {
              fn.apply(event, event.args);
            });
          }
          this.data[event.type] = event.args;
        }
      }, {
        key: "onceListener",
        value: function onceListener(eventName, listener) {
          var _this3 = this;
          var onceListener2 = function onceListener3() {
            _this3.removeListener(eventName, onceListener3);
            return listener.apply(void 0, arguments);
          };
          return onceListener2;
        }
      }]);
      return Channel2;
    }();
    esm_default2 = Channel;
  }
});

export {
  Channel,
  esm_default2 as esm_default,
  init_esm2 as init_esm
};
//# sourceMappingURL=chunk-KRVC46AS.js.map
