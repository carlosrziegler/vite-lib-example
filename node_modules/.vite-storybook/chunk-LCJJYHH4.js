import {
  require_fix_regexp_well_known_symbol_logic,
  require_regexp_exec_abstract,
  require_to_string
} from "./chunk-MYJXNO5K.js";
import {
  require_an_object,
  require_function_call,
  require_get_method,
  require_is_null_or_undefined,
  require_require_object_coercible
} from "./chunk-L4GB7WNN.js";
import {
  __commonJS,
  __esm,
  init_define_import_meta_env
} from "./chunk-63WBANMH.js";

// node_modules/core-js/internals/same-value.js
var require_same_value = __commonJS({
  "node_modules/core-js/internals/same-value.js"(exports, module) {
    init_define_import_meta_env();
    module.exports = Object.is || function is(x, y) {
      return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y;
    };
  }
});

// node_modules/core-js/modules/es.string.search.js
var call, fixRegExpWellKnownSymbolLogic, anObject, isNullOrUndefined, requireObjectCoercible, sameValue, toString, getMethod, regExpExec;
var init_es_string_search = __esm({
  "node_modules/core-js/modules/es.string.search.js"() {
    "use strict";
    init_define_import_meta_env();
    call = require_function_call();
    fixRegExpWellKnownSymbolLogic = require_fix_regexp_well_known_symbol_logic();
    anObject = require_an_object();
    isNullOrUndefined = require_is_null_or_undefined();
    requireObjectCoercible = require_require_object_coercible();
    sameValue = require_same_value();
    toString = require_to_string();
    getMethod = require_get_method();
    regExpExec = require_regexp_exec_abstract();
    fixRegExpWellKnownSymbolLogic("search", function(SEARCH, nativeSearch, maybeCallNative) {
      return [
        function search(regexp) {
          var O = requireObjectCoercible(this);
          var searcher = isNullOrUndefined(regexp) ? void 0 : getMethod(regexp, SEARCH);
          return searcher ? call(searcher, regexp, O) : new RegExp(regexp)[SEARCH](toString(O));
        },
        function(string) {
          var rx = anObject(this);
          var S = toString(string);
          var res = maybeCallNative(nativeSearch, rx, S);
          if (res.done)
            return res.value;
          var previousLastIndex = rx.lastIndex;
          if (!sameValue(previousLastIndex, 0))
            rx.lastIndex = 0;
          var result = regExpExec(rx, S);
          if (!sameValue(rx.lastIndex, previousLastIndex))
            rx.lastIndex = previousLastIndex;
          return result === null ? -1 : result.index;
        }
      ];
    });
  }
});

export {
  init_es_string_search
};
//# sourceMappingURL=chunk-LCJJYHH4.js.map
