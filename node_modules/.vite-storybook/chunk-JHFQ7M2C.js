import {
  init_esm as init_esm2,
  isJSON,
  parse,
  stringify
} from "./chunk-ACFELJHL.js";
import {
  init_es_string_search
} from "./chunk-LCJJYHH4.js";
import {
  require_lib
} from "./chunk-GINDXL2T.js";
import {
  esm_default,
  init_esm
} from "./chunk-KRVC46AS.js";
import {
  init_web_url,
  init_web_url_search_params,
  require_is_integral_number
} from "./chunk-XJPSDBHU.js";
import {
  init_es_number_constructor
} from "./chunk-UQDYFMBC.js";
import {
  init_es_object_values
} from "./chunk-B3Z7DGEU.js";
import {
  init_es_promise
} from "./chunk-AUU3CWDW.js";
import {
  init_es_array_from,
  init_es_array_includes,
  init_es_array_map,
  init_es_function_name,
  init_es_object_assign,
  init_es_object_entries,
  init_es_string_includes,
  init_es_symbol,
  init_es_symbol_description,
  init_es_symbol_iterator
} from "./chunk-JNJVKBIS.js";
import {
  init_es_array_filter,
  init_es_array_slice,
  init_web_dom_collections_for_each
} from "./chunk-3JN5YVZI.js";
import {
  init_es_array_concat,
  init_es_set,
  init_es_string_replace,
  init_web_dom_collections_iterator,
  require_create_property,
  require_es_array_iterator,
  require_es_regexp_exec,
  require_es_string_iterator
} from "./chunk-MYJXNO5K.js";
import {
  init_es_object_to_string,
  require_export,
  require_iterate
} from "./chunk-L4GB7WNN.js";
import {
  require_window
} from "./chunk-UY7AYQEB.js";
import {
  __esm,
  __export,
  __toESM,
  init_define_import_meta_env
} from "./chunk-63WBANMH.js";

// node_modules/core-js/modules/es.object.from-entries.js
var $, iterate, createProperty;
var init_es_object_from_entries = __esm({
  "node_modules/core-js/modules/es.object.from-entries.js"() {
    init_define_import_meta_env();
    $ = require_export();
    iterate = require_iterate();
    createProperty = require_create_property();
    $({ target: "Object", stat: true }, {
      fromEntries: function fromEntries(iterable) {
        var obj = {};
        iterate(iterable, function(k, v) {
          createProperty(obj, k, v);
        }, { AS_ENTRIES: true });
        return obj;
      }
    });
  }
});

// node_modules/core-js/modules/es.number.is-integer.js
var $2, isIntegralNumber;
var init_es_number_is_integer = __esm({
  "node_modules/core-js/modules/es.number.is-integer.js"() {
    init_define_import_meta_env();
    $2 = require_export();
    isIntegralNumber = require_is_integral_number();
    $2({ target: "Number", stat: true }, {
      isInteger: isIntegralNumber
    });
  }
});

// node_modules/@storybook/channel-postmessage/node_modules/@storybook/core-events/dist/esm/index.js
var esm_exports = {};
__export(esm_exports, {
  CHANNEL_CREATED: () => CHANNEL_CREATED,
  CONFIG_ERROR: () => CONFIG_ERROR,
  CURRENT_STORY_WAS_SET: () => CURRENT_STORY_WAS_SET,
  DOCS_RENDERED: () => DOCS_RENDERED,
  FORCE_REMOUNT: () => FORCE_REMOUNT,
  FORCE_RE_RENDER: () => FORCE_RE_RENDER,
  GLOBALS_UPDATED: () => GLOBALS_UPDATED,
  IGNORED_EXCEPTION: () => IGNORED_EXCEPTION,
  NAVIGATE_URL: () => NAVIGATE_URL,
  PREVIEW_KEYDOWN: () => PREVIEW_KEYDOWN,
  REGISTER_SUBSCRIPTION: () => REGISTER_SUBSCRIPTION,
  RESET_STORY_ARGS: () => RESET_STORY_ARGS,
  SELECT_STORY: () => SELECT_STORY,
  SET_CURRENT_STORY: () => SET_CURRENT_STORY,
  SET_GLOBALS: () => SET_GLOBALS,
  SET_STORIES: () => SET_STORIES,
  SHARED_STATE_CHANGED: () => SHARED_STATE_CHANGED,
  SHARED_STATE_SET: () => SHARED_STATE_SET,
  STORIES_COLLAPSE_ALL: () => STORIES_COLLAPSE_ALL,
  STORIES_EXPAND_ALL: () => STORIES_EXPAND_ALL,
  STORY_ARGS_UPDATED: () => STORY_ARGS_UPDATED,
  STORY_CHANGED: () => STORY_CHANGED,
  STORY_ERRORED: () => STORY_ERRORED,
  STORY_INDEX_INVALIDATED: () => STORY_INDEX_INVALIDATED,
  STORY_MISSING: () => STORY_MISSING,
  STORY_PREPARED: () => STORY_PREPARED,
  STORY_RENDERED: () => STORY_RENDERED,
  STORY_RENDER_PHASE_CHANGED: () => STORY_RENDER_PHASE_CHANGED,
  STORY_SPECIFIED: () => STORY_SPECIFIED,
  STORY_THREW_EXCEPTION: () => STORY_THREW_EXCEPTION,
  STORY_UNCHANGED: () => STORY_UNCHANGED,
  UPDATE_GLOBALS: () => UPDATE_GLOBALS,
  UPDATE_QUERY_PARAMS: () => UPDATE_QUERY_PARAMS,
  UPDATE_STORY_ARGS: () => UPDATE_STORY_ARGS,
  default: () => esm_default2
});
var events, esm_default2, CHANNEL_CREATED, CONFIG_ERROR, STORY_INDEX_INVALIDATED, STORY_SPECIFIED, SET_STORIES, SET_CURRENT_STORY, CURRENT_STORY_WAS_SET, FORCE_RE_RENDER, FORCE_REMOUNT, STORY_PREPARED, STORY_CHANGED, STORY_UNCHANGED, STORY_RENDERED, STORY_MISSING, STORY_ERRORED, STORY_THREW_EXCEPTION, STORY_RENDER_PHASE_CHANGED, UPDATE_STORY_ARGS, STORY_ARGS_UPDATED, RESET_STORY_ARGS, SET_GLOBALS, UPDATE_GLOBALS, GLOBALS_UPDATED, REGISTER_SUBSCRIPTION, PREVIEW_KEYDOWN, SELECT_STORY, STORIES_COLLAPSE_ALL, STORIES_EXPAND_ALL, DOCS_RENDERED, SHARED_STATE_CHANGED, SHARED_STATE_SET, NAVIGATE_URL, UPDATE_QUERY_PARAMS, IGNORED_EXCEPTION;
var init_esm3 = __esm({
  "node_modules/@storybook/channel-postmessage/node_modules/@storybook/core-events/dist/esm/index.js"() {
    init_define_import_meta_env();
    (function(events2) {
      events2["CHANNEL_CREATED"] = "channelCreated";
      events2["CONFIG_ERROR"] = "configError";
      events2["STORY_INDEX_INVALIDATED"] = "storyIndexInvalidated";
      events2["STORY_SPECIFIED"] = "storySpecified";
      events2["SET_STORIES"] = "setStories";
      events2["SET_CURRENT_STORY"] = "setCurrentStory";
      events2["CURRENT_STORY_WAS_SET"] = "currentStoryWasSet";
      events2["FORCE_RE_RENDER"] = "forceReRender";
      events2["FORCE_REMOUNT"] = "forceRemount";
      events2["STORY_PREPARED"] = "storyPrepared";
      events2["STORY_CHANGED"] = "storyChanged";
      events2["STORY_UNCHANGED"] = "storyUnchanged";
      events2["STORY_RENDERED"] = "storyRendered";
      events2["STORY_MISSING"] = "storyMissing";
      events2["STORY_ERRORED"] = "storyErrored";
      events2["STORY_THREW_EXCEPTION"] = "storyThrewException";
      events2["STORY_RENDER_PHASE_CHANGED"] = "storyRenderPhaseChanged";
      events2["UPDATE_STORY_ARGS"] = "updateStoryArgs";
      events2["STORY_ARGS_UPDATED"] = "storyArgsUpdated";
      events2["RESET_STORY_ARGS"] = "resetStoryArgs";
      events2["SET_GLOBALS"] = "setGlobals";
      events2["UPDATE_GLOBALS"] = "updateGlobals";
      events2["GLOBALS_UPDATED"] = "globalsUpdated";
      events2["REGISTER_SUBSCRIPTION"] = "registerSubscription";
      events2["PREVIEW_KEYDOWN"] = "previewKeydown";
      events2["SELECT_STORY"] = "selectStory";
      events2["STORIES_COLLAPSE_ALL"] = "storiesCollapseAll";
      events2["STORIES_EXPAND_ALL"] = "storiesExpandAll";
      events2["DOCS_RENDERED"] = "docsRendered";
      events2["SHARED_STATE_CHANGED"] = "sharedStateChanged";
      events2["SHARED_STATE_SET"] = "sharedStateSet";
      events2["NAVIGATE_URL"] = "navigateUrl";
      events2["UPDATE_QUERY_PARAMS"] = "updateQueryParams";
    })(events || (events = {}));
    esm_default2 = events;
    CHANNEL_CREATED = events.CHANNEL_CREATED;
    CONFIG_ERROR = events.CONFIG_ERROR;
    STORY_INDEX_INVALIDATED = events.STORY_INDEX_INVALIDATED;
    STORY_SPECIFIED = events.STORY_SPECIFIED;
    SET_STORIES = events.SET_STORIES;
    SET_CURRENT_STORY = events.SET_CURRENT_STORY;
    CURRENT_STORY_WAS_SET = events.CURRENT_STORY_WAS_SET;
    FORCE_RE_RENDER = events.FORCE_RE_RENDER;
    FORCE_REMOUNT = events.FORCE_REMOUNT;
    STORY_PREPARED = events.STORY_PREPARED;
    STORY_CHANGED = events.STORY_CHANGED;
    STORY_UNCHANGED = events.STORY_UNCHANGED;
    STORY_RENDERED = events.STORY_RENDERED;
    STORY_MISSING = events.STORY_MISSING;
    STORY_ERRORED = events.STORY_ERRORED;
    STORY_THREW_EXCEPTION = events.STORY_THREW_EXCEPTION;
    STORY_RENDER_PHASE_CHANGED = events.STORY_RENDER_PHASE_CHANGED;
    UPDATE_STORY_ARGS = events.UPDATE_STORY_ARGS;
    STORY_ARGS_UPDATED = events.STORY_ARGS_UPDATED;
    RESET_STORY_ARGS = events.RESET_STORY_ARGS;
    SET_GLOBALS = events.SET_GLOBALS;
    UPDATE_GLOBALS = events.UPDATE_GLOBALS;
    GLOBALS_UPDATED = events.GLOBALS_UPDATED;
    REGISTER_SUBSCRIPTION = events.REGISTER_SUBSCRIPTION;
    PREVIEW_KEYDOWN = events.PREVIEW_KEYDOWN;
    SELECT_STORY = events.SELECT_STORY;
    STORIES_COLLAPSE_ALL = events.STORIES_COLLAPSE_ALL;
    STORIES_EXPAND_ALL = events.STORIES_EXPAND_ALL;
    DOCS_RENDERED = events.DOCS_RENDERED;
    SHARED_STATE_CHANGED = events.SHARED_STATE_CHANGED;
    SHARED_STATE_SET = events.SHARED_STATE_SET;
    NAVIGATE_URL = events.NAVIGATE_URL;
    UPDATE_QUERY_PARAMS = events.UPDATE_QUERY_PARAMS;
    IGNORED_EXCEPTION = new Error("ignoredException");
  }
});

// node_modules/@storybook/channel-postmessage/node_modules/@storybook/client-logger/dist/esm/index.js
var import_es_array_iterator, import_es_string_iterator, import_es_regexp_exec, import_global, LOGLEVEL, console2, levels, currentLogLevelString, currentLogLevelNumber, logger, logged, once, pretty;
var init_esm4 = __esm({
  "node_modules/@storybook/channel-postmessage/node_modules/@storybook/client-logger/dist/esm/index.js"() {
    init_define_import_meta_env();
    init_es_array_concat();
    import_es_array_iterator = __toESM(require_es_array_iterator());
    init_es_object_to_string();
    init_es_set();
    import_es_string_iterator = __toESM(require_es_string_iterator());
    init_web_dom_collections_iterator();
    import_es_regexp_exec = __toESM(require_es_regexp_exec());
    init_es_string_replace();
    import_global = __toESM(require_window());
    LOGLEVEL = import_global.default.LOGLEVEL;
    console2 = import_global.default.console;
    levels = {
      trace: 1,
      debug: 2,
      info: 3,
      warn: 4,
      error: 5,
      silent: 10
    };
    currentLogLevelString = LOGLEVEL;
    currentLogLevelNumber = levels[currentLogLevelString] || levels.info;
    logger = {
      trace: function trace(message) {
        for (var _len = arguments.length, rest = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          rest[_key - 1] = arguments[_key];
        }
        return currentLogLevelNumber <= levels.trace && console2.trace.apply(console2, [message].concat(rest));
      },
      debug: function debug(message) {
        for (var _len2 = arguments.length, rest = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
          rest[_key2 - 1] = arguments[_key2];
        }
        return currentLogLevelNumber <= levels.debug && console2.debug.apply(console2, [message].concat(rest));
      },
      info: function info(message) {
        for (var _len3 = arguments.length, rest = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
          rest[_key3 - 1] = arguments[_key3];
        }
        return currentLogLevelNumber <= levels.info && console2.info.apply(console2, [message].concat(rest));
      },
      warn: function warn(message) {
        for (var _len4 = arguments.length, rest = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
          rest[_key4 - 1] = arguments[_key4];
        }
        return currentLogLevelNumber <= levels.warn && console2.warn.apply(console2, [message].concat(rest));
      },
      error: function error(message) {
        for (var _len5 = arguments.length, rest = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {
          rest[_key5 - 1] = arguments[_key5];
        }
        return currentLogLevelNumber <= levels.error && console2.error.apply(console2, [message].concat(rest));
      },
      log: function log(message) {
        for (var _len6 = arguments.length, rest = new Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {
          rest[_key6 - 1] = arguments[_key6];
        }
        return currentLogLevelNumber < levels.silent && console2.log.apply(console2, [message].concat(rest));
      }
    };
    logged = /* @__PURE__ */ new Set();
    once = function once2(type) {
      return function(message) {
        if (logged.has(message))
          return void 0;
        logged.add(message);
        for (var _len7 = arguments.length, rest = new Array(_len7 > 1 ? _len7 - 1 : 0), _key7 = 1; _key7 < _len7; _key7++) {
          rest[_key7 - 1] = arguments[_key7];
        }
        return logger[type].apply(logger, [message].concat(rest));
      };
    };
    once.clear = function() {
      return logged.clear();
    };
    once.trace = once("trace");
    once.debug = once("debug");
    once.info = once("info");
    once.warn = once("warn");
    once.error = once("error");
    once.log = once("log");
    pretty = function pretty2(type) {
      return function() {
        var argArray = [];
        for (var _len8 = arguments.length, args = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {
          args[_key8] = arguments[_key8];
        }
        if (args.length) {
          var startTagRe = /<span\s+style=(['"])([^'"]*)\1\s*>/gi;
          var endTagRe = /<\/span>/gi;
          var reResultArray;
          argArray.push(args[0].replace(startTagRe, "%c").replace(endTagRe, "%c"));
          while (reResultArray = startTagRe.exec(args[0])) {
            argArray.push(reResultArray[2]);
            argArray.push("");
          }
          for (var j = 1; j < args.length; j++) {
            argArray.push(args[j]);
          }
        }
        logger[type].apply(logger, argArray);
      };
    };
    pretty.trace = pretty("trace");
    pretty.debug = pretty("debug");
    pretty.info = pretty("info");
    pretty.warn = pretty("warn");
    pretty.error = pretty("error");
  }
});

// node_modules/@storybook/channel-postmessage/dist/esm/index.js
function _toArray(arr) {
  return _arrayWithHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableRest();
}
function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}
function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
    return Array.from(iter);
}
function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr))
    return _arrayLikeToArray(arr);
}
function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}
function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray(o, minLen);
}
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
function _iterableToArrayLimit(arr, i) {
  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
  if (_i == null)
    return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _s, _e;
  try {
    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);
      if (i && _arr.length === i)
        break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null)
        _i["return"]();
    } finally {
      if (_d)
        throw _e;
    }
  }
  return _arr;
}
function _arrayWithHoles(arr) {
  if (Array.isArray(arr))
    return arr;
}
function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", { writable: false });
  return Constructor;
}
function createChannel(_ref5) {
  var page = _ref5.page;
  var transport = new PostmsgTransport({
    page
  });
  return new esm_default({
    transport
  });
}
var import_es_array_iterator2, import_es_regexp_exec2, import_es_string_iterator2, import_global2, import_qs, globalWindow, document, location, KEY, defaultEventOptions, PostmsgTransport, getEventSourceUrl;
var init_esm5 = __esm({
  "node_modules/@storybook/channel-postmessage/dist/esm/index.js"() {
    init_define_import_meta_env();
    import_es_array_iterator2 = __toESM(require_es_array_iterator());
    init_es_object_from_entries();
    init_es_array_filter();
    init_es_object_to_string();
    init_es_object_entries();
    init_es_object_assign();
    init_es_number_is_integer();
    init_es_number_constructor();
    import_es_regexp_exec2 = __toESM(require_es_regexp_exec());
    init_es_string_search();
    init_es_promise();
    init_web_dom_collections_for_each();
    init_es_array_map();
    init_es_array_includes();
    init_es_string_includes();
    init_es_object_values();
    init_es_array_concat();
    import_es_string_iterator2 = __toESM(require_es_string_iterator());
    init_web_dom_collections_iterator();
    init_web_url();
    init_web_url_search_params();
    init_es_array_slice();
    init_es_symbol();
    init_es_symbol_description();
    init_es_symbol_iterator();
    init_es_function_name();
    init_es_array_from();
    import_global2 = __toESM(require_window());
    init_esm3();
    init_esm();
    init_esm4();
    init_esm2();
    import_qs = __toESM(require_lib());
    globalWindow = import_global2.default.window;
    document = import_global2.default.document;
    location = import_global2.default.location;
    KEY = "storybook-channel";
    defaultEventOptions = {
      allowFunction: true,
      maxDepth: 25
    };
    PostmsgTransport = function() {
      function PostmsgTransport2(config) {
        _classCallCheck(this, PostmsgTransport2);
        this.config = config;
        this.buffer = void 0;
        this.handler = void 0;
        this.connected = void 0;
        this.buffer = [];
        this.handler = null;
        globalWindow.addEventListener("message", this.handleEvent.bind(this), false);
        if (config.page !== "manager" && config.page !== "preview") {
          throw new Error('postmsg-channel: "config.page" cannot be "'.concat(config.page, '"'));
        }
      }
      _createClass(PostmsgTransport2, [{
        key: "setHandler",
        value: function setHandler(handler) {
          var _this = this;
          this.handler = function() {
            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
              args[_key] = arguments[_key];
            }
            handler.apply(_this, args);
            if (!_this.connected && _this.getLocalFrame().length) {
              _this.flush();
              _this.connected = true;
            }
          };
        }
      }, {
        key: "send",
        value: function send(event, options) {
          var _this2 = this;
          var _ref = options || {}, target = _ref.target, allowRegExp = _ref.allowRegExp, allowFunction = _ref.allowFunction, allowSymbol = _ref.allowSymbol, allowDate = _ref.allowDate, allowUndefined = _ref.allowUndefined, allowClass = _ref.allowClass, maxDepth = _ref.maxDepth, space = _ref.space, lazyEval = _ref.lazyEval;
          var eventOptions = Object.fromEntries(Object.entries({
            allowRegExp,
            allowFunction,
            allowSymbol,
            allowDate,
            allowUndefined,
            allowClass,
            maxDepth,
            space,
            lazyEval
          }).filter(function(_ref2) {
            var _ref3 = _slicedToArray(_ref2, 2), k = _ref3[0], v = _ref3[1];
            return typeof v !== "undefined";
          }));
          var stringifyOptions = Object.assign({}, defaultEventOptions, import_global2.default.CHANNEL_OPTIONS || {}, eventOptions);
          if (options && Number.isInteger(options.depth)) {
            stringifyOptions.maxDepth = options.depth;
          }
          var frames = this.getFrames(target);
          var query = import_qs.default.parse(location.search, {
            ignoreQueryPrefix: true
          });
          var data = stringify({
            key: KEY,
            event,
            refId: query.refId
          }, stringifyOptions);
          if (!frames.length) {
            return new Promise(function(resolve, reject) {
              _this2.buffer.push({
                event,
                resolve,
                reject
              });
            });
          }
          if (this.buffer.length) {
            this.flush();
          }
          frames.forEach(function(f) {
            try {
              f.postMessage(data, "*");
            } catch (e) {
              console.error("sending over postmessage fail");
            }
          });
          return Promise.resolve(null);
        }
      }, {
        key: "flush",
        value: function flush() {
          var _this3 = this;
          var buffer = this.buffer;
          this.buffer = [];
          buffer.forEach(function(item) {
            _this3.send(item.event).then(item.resolve).catch(item.reject);
          });
        }
      }, {
        key: "getFrames",
        value: function getFrames(target) {
          if (this.config.page === "manager") {
            var nodes = _toConsumableArray(document.querySelectorAll("iframe[data-is-storybook][data-is-loaded]"));
            var list = nodes.filter(function(e) {
              try {
                return !!e.contentWindow && e.dataset.isStorybook !== void 0 && e.id === target;
              } catch (er) {
                return false;
              }
            }).map(function(e) {
              return e.contentWindow;
            });
            return list.length ? list : this.getCurrentFrames();
          }
          if (globalWindow && globalWindow.parent && globalWindow.parent !== globalWindow) {
            return [globalWindow.parent];
          }
          return [];
        }
      }, {
        key: "getCurrentFrames",
        value: function getCurrentFrames() {
          if (this.config.page === "manager") {
            var list = _toConsumableArray(document.querySelectorAll('[data-is-storybook="true"]'));
            return list.map(function(e) {
              return e.contentWindow;
            });
          }
          if (globalWindow && globalWindow.parent) {
            return [globalWindow.parent];
          }
          return [];
        }
      }, {
        key: "getLocalFrame",
        value: function getLocalFrame() {
          if (this.config.page === "manager") {
            var list = _toConsumableArray(document.querySelectorAll("#storybook-preview-iframe"));
            return list.map(function(e) {
              return e.contentWindow;
            });
          }
          if (globalWindow && globalWindow.parent) {
            return [globalWindow.parent];
          }
          return [];
        }
      }, {
        key: "handleEvent",
        value: function handleEvent(rawEvent) {
          try {
            var data = rawEvent.data;
            var _ref4 = typeof data === "string" && isJSON(data) ? parse(data) : data, key = _ref4.key, event = _ref4.event, refId = _ref4.refId;
            if (key === KEY) {
              var pageString = this.config.page === "manager" ? '<span style="color: #37D5D3; background: black"> manager </span>' : '<span style="color: #1EA7FD; background: black"> preview </span>';
              var eventString = Object.values(esm_exports).includes(event.type) ? '<span style="color: #FF4785">'.concat(event.type, "</span>") : '<span style="color: #FFAE00">'.concat(event.type, "</span>");
              if (refId) {
                event.refId = refId;
              }
              event.source = this.config.page === "preview" ? rawEvent.origin : getEventSourceUrl(rawEvent);
              if (!event.source) {
                pretty.error("".concat(pageString, " received ").concat(eventString, " but was unable to determine the source of the event"));
                return;
              }
              var message = "".concat(pageString, " received ").concat(eventString, " (").concat(data.length, ")");
              pretty.debug.apply(pretty, [location.origin !== event.source ? message : "".concat(message, ' <span style="color: gray">(on ').concat(location.origin, " from ").concat(event.source, ")</span>")].concat(_toConsumableArray(event.args)));
              this.handler(event);
            }
          } catch (error2) {
            logger.error(error2);
          }
        }
      }]);
      return PostmsgTransport2;
    }();
    getEventSourceUrl = function getEventSourceUrl2(event) {
      var frames = _toConsumableArray(document.querySelectorAll("iframe[data-is-storybook]"));
      var _frames$filter = frames.filter(function(element) {
        try {
          return element.contentWindow === event.source;
        } catch (err) {
        }
        var src2 = element.getAttribute("src");
        var origin;
        try {
          var _URL = new URL(src2, document.location);
          origin = _URL.origin;
        } catch (err) {
          return false;
        }
        return origin === event.origin;
      }), _frames$filter2 = _toArray(_frames$filter), frame = _frames$filter2[0], remainder = _frames$filter2.slice(1);
      if (frame && remainder.length === 0) {
        var src = frame.getAttribute("src");
        var _URL2 = new URL(src, document.location), protocol = _URL2.protocol, host = _URL2.host, pathname = _URL2.pathname;
        return "".concat(protocol, "//").concat(host).concat(pathname);
      }
      if (remainder.length > 0) {
        logger.error("found multiple candidates for event source");
      }
      return null;
    };
  }
});

export {
  KEY,
  PostmsgTransport,
  createChannel,
  init_esm5 as init_esm
};
//# sourceMappingURL=chunk-JHFQ7M2C.js.map
