"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.pluginConfig = exports.commonConfig = void 0;
const path = __importStar(require("path"));
const envs_1 = require("./envs");
const mock_core_js_1 = require("./mock-core-js");
const code_generator_plugin_1 = require("./code-generator-plugin");
const inject_export_order_plugin_1 = require("./inject-export-order-plugin");
const mdx_plugin_1 = require("./mdx-plugin");
const source_loader_plugin_1 = require("./source-loader-plugin");
// Vite config that is common to development and production mode
async function commonConfig(options, _type) {
    const { framework } = options;
    return {
        configFile: false,
        root: path.resolve(options.configDir, '..'),
        cacheDir: 'node_modules/.vite-storybook',
        envPrefix: envs_1.allowedEnvPrefix,
        define: {},
        resolve: framework === 'vue3'
            ? {
                alias: {
                    vue: 'vue/dist/vue.esm-bundler.js',
                },
            }
            : {},
        plugins: await pluginConfig(options, _type),
    };
}
exports.commonConfig = commonConfig;
async function pluginConfig(options, _type) {
    const { framework, presets } = options;
    const svelteOptions = await presets.apply('svelteOptions', {}, options);
    const plugins = [
        (0, code_generator_plugin_1.codeGeneratorPlugin)(options),
        (0, mock_core_js_1.mockCoreJs)(),
        (0, source_loader_plugin_1.sourceLoaderPlugin)(),
        (0, mdx_plugin_1.mdxPlugin)(),
        inject_export_order_plugin_1.injectExportOrderPlugin,
    ];
    if (framework === 'vue' || framework === 'vue3') {
        try {
            const vuePlugin = require('@vitejs/plugin-vue');
            plugins.push(vuePlugin());
            const { vueDocgen } = await Promise.resolve().then(() => __importStar(require('./plugins/vue-docgen')));
            plugins.push(vueDocgen());
        }
        catch (err) {
            if (err.code !== 'MODULE_NOT_FOUND') {
                throw new Error('storybook-builder-vite requires @vitejs/plugin-vue to be installed ' +
                    'when using @storybook/vue or @storybook/vue3.' +
                    '  Please install it and start storybook again.');
            }
            throw err;
        }
    }
    if (framework === 'svelte') {
        try {
            const sveltePlugin = require('@sveltejs/vite-plugin-svelte').svelte;
            plugins.push(sveltePlugin(svelteOptions));
        }
        catch (err) {
            if (err.code !== 'MODULE_NOT_FOUND') {
                throw new Error('storybook-builder-vite requires @sveltejs/vite-plugin-svelte to be installed when using @storybook/svelte.' +
                    '  Please install it and start storybook again.');
            }
            throw err;
        }
        try {
            const csfPlugin = require('./svelte/csf-plugin').default;
            plugins.push(csfPlugin(svelteOptions));
        }
        catch (err) {
            if (err.code !== 'MODULE_NOT_FOUND') {
                throw new Error('storybook-builder-vite requires @storybook/addon-svelte-csf to be installed when using @storybook/svelte.' +
                    '  Please install it and start storybook again.');
            }
            throw err;
        }
    }
    if (framework === 'react') {
        plugins.push(require('@vitejs/plugin-react')({
            // Do not treat story files as HMR boundaries, storybook itself needs to handle them.
            exclude: [/\.stories\.([tj])sx?$/, /node_modules/],
        }));
        const { reactDocgen, reactDocgenTypescriptOptions } = await presets.apply('typescript', {});
        let typescriptPresent;
        try {
            require.resolve('typescript');
            typescriptPresent = true;
        }
        catch (e) {
            typescriptPresent = false;
        }
        if (reactDocgen === 'react-docgen-typescript' && typescriptPresent) {
            plugins.push(require('@joshwooding/vite-plugin-react-docgen-typescript').default(reactDocgenTypescriptOptions));
        }
    }
    if (framework === 'glimmerx') {
        const plugin = require('vite-plugin-glimmerx/index.cjs');
        plugins.push(plugin.default());
    }
    return plugins;
}
exports.pluginConfig = pluginConfig;
//# sourceMappingURL=vite-config.js.map