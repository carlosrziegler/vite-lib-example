"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.codeGeneratorPlugin = void 0;
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
const transform_iframe_html_1 = require("./transform-iframe-html");
const codegen_iframe_script_1 = require("./codegen-iframe-script");
const codegen_modern_iframe_script_1 = require("./codegen-modern-iframe-script");
const codegen_importfn_script_1 = require("./codegen-importfn-script");
const codegen_entries_1 = require("./codegen-entries");
function codeGeneratorPlugin(options) {
    const virtualFileId = '/virtual:/@storybook/builder-vite/vite-app.js';
    const virtualStoriesFile = '/virtual:/@storybook/builder-vite/storybook-stories.js';
    const virtualPreviewFile = '/virtual:/@storybook/builder-vite/preview-entry.js';
    const iframePath = path.resolve(__dirname, '..', 'input', 'iframe.html');
    let iframeId;
    // noinspection JSUnusedGlobalSymbols
    return {
        name: 'storybook-vite-code-generator-plugin',
        enforce: 'pre',
        configureServer(server) {
            // invalidate the whole vite-app.js script on every file change.
            // (this might be a little too aggressive?)
            server.watcher.on('change', (_e) => {
                const { moduleGraph } = server;
                const appModule = moduleGraph.getModuleById(virtualFileId);
                if (appModule) {
                    server.moduleGraph.invalidateModule(appModule);
                }
                const storiesModule = moduleGraph.getModuleById(virtualStoriesFile);
                if (storiesModule) {
                    server.moduleGraph.invalidateModule(storiesModule);
                }
            });
        },
        config(config, { command }) {
            // If we are building the static distribution, add iframe.html as an entry.
            // In development mode, it's not an entry - instead, we use an express middleware
            // to serve iframe.html. The reason is that Vite's dev server (at the time of writing)
            // does not support virtual files as entry points.
            if (command === 'build') {
                if (!config.build) {
                    config.build = {};
                }
                config.build.rollupOptions = {
                    input: iframePath,
                };
            }
        },
        configResolved(config) {
            iframeId = `${config.root}/iframe.html`;
        },
        resolveId(source) {
            if (source === virtualFileId) {
                return virtualFileId;
            }
            else if (source === iframePath) {
                return iframeId;
            }
            else if (source === virtualStoriesFile) {
                return virtualStoriesFile;
            }
            else if (source === virtualPreviewFile) {
                return virtualPreviewFile;
            }
        },
        async load(id) {
            var _a;
            const storyStoreV7 = (_a = options.features) === null || _a === void 0 ? void 0 : _a.storyStoreV7;
            if (id === virtualStoriesFile) {
                if (storyStoreV7) {
                    return (0, codegen_importfn_script_1.generateImportFnScriptCode)(options);
                }
                else {
                    return (0, codegen_entries_1.generateVirtualStoryEntryCode)(options);
                }
            }
            if (id === virtualPreviewFile && !storyStoreV7) {
                return (0, codegen_entries_1.generatePreviewEntryCode)(options);
            }
            if (id === virtualFileId) {
                if (storyStoreV7) {
                    return (0, codegen_modern_iframe_script_1.generateModernIframeScriptCode)(options, { storiesFilename: virtualStoriesFile });
                }
                else {
                    return (0, codegen_iframe_script_1.generateIframeScriptCode)(options, {
                        storiesFilename: virtualStoriesFile,
                        previewFilename: virtualPreviewFile,
                    });
                }
            }
            if (id === iframeId) {
                return fs.readFileSync(path.resolve(__dirname, '..', 'input', 'iframe.html'), 'utf-8');
            }
        },
        async transformIndexHtml(html, ctx) {
            if (ctx.path !== '/iframe.html') {
                return;
            }
            return (0, transform_iframe_html_1.transformIframeHtml)(html, options);
        },
    };
}
exports.codeGeneratorPlugin = codeGeneratorPlugin;
//# sourceMappingURL=code-generator-plugin.js.map