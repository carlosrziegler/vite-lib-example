import { Keyframes, SerializedStyles } from "./_modules/@emotion-core-types-index";
import { CreateStyled } from "./_modules/@emotion-styled-types-index";
declare const animation: {
    readonly rotate360: Keyframes;
    readonly glow: Keyframes;
    readonly float: Keyframes;
    readonly jiggle: Keyframes;
    readonly inlineGlow: SerializedStyles;
    readonly hoverable: SerializedStyles;
};
declare const darkenColor: (color: string) => string;
declare const easing: {
    rubber: string;
};
declare const lightenColor: (color: string) => string;
export declare const background: {
    app: string;
    bar: string;
    content: string;
    gridCellSize: number;
    hoverable: string;
    positive: string;
    negative: string;
    warning: string;
    critical: string;
};
export declare const color: {
    primary: string;
    secondary: string;
    tertiary: string;
    ancillary: string;
    orange: string;
    gold: string;
    green: string;
    seafoam: string;
    purple: string;
    ultraviolet: string;
    lightest: string;
    lighter: string;
    light: string;
    mediumlight: string;
    medium: string;
    mediumdark: string;
    dark: string;
    darker: string;
    darkest: string;
    border: string;
    positive: string;
    negative: string;
    warning: string;
    critical: string;
    defaultText: string;
    inverseText: string;
};
export declare const convert: (inherit?: ThemeVars) => Theme;
export declare const create: (vars?: ThemeVars, rest?: Rest) => ThemeVars;
export declare const createGlobal: ({ color, background, typography, }: {
    color: Color;
    background: Background;
    typography: Typography;
}) => Return;
export declare const createReset: ({ typography }: {
    typography: Typography;
}) => Return;
export declare const ensure: (input: ThemeVars) => Theme;
export declare const ignoreSsrWarning = "/* emotion-disable-server-rendering-unsafe-selector-warning-please-do-not-use-this-the-warning-exists-for-a-reason */";
export declare const styled: CreateStyled<Theme>;
export declare const themes: {
    light: ThemeVars;
    dark: ThemeVars;
    normal: ThemeVars;
};
export declare const typography: {
    fonts: {
        base: string;
        mono: string;
    };
    weight: {
        regular: number;
        bold: number;
        black: number;
    };
    size: {
        s1: number;
        s2: number;
        s3: number;
        m1: number;
        m2: number;
        m3: number;
        l1: number;
        l2: number;
        l3: number;
        code: number;
    };
};
export declare type Animation = typeof animation;
export declare type Background = typeof background;
export declare type Color = typeof color;
export declare type Easing = typeof easing;
export declare type TextSize = number | string;
export declare type Typography = typeof typography;
export declare type Value = string | number;
export interface Brand {
    title: string | undefined;
    url: string | null | undefined;
    image: string | null | undefined;
}
export interface Rest {
    [key: string]: any;
}
export interface Return {
    [key: string]: {
        [key: string]: Value;
    };
}
export interface Theme {
    color: Color;
    background: Background;
    typography: Typography;
    animation: Animation;
    easing: Easing;
    input: {
        border: string;
        background: string;
        color: string;
        borderRadius: number;
    };
    layoutMargin: number;
    appBorderColor: string;
    appBorderRadius: number;
    barTextColor: string;
    barSelectedColor: string;
    barBg: string;
    brand: Brand;
    code: {
        [key: string]: string | object;
    };
    [key: string]: any;
}
export interface ThemeVars {
    base: "light" | "dark";
    colorPrimary?: string;
    colorSecondary?: string;
    appBg?: string;
    appContentBg?: string;
    appBorderColor?: string;
    appBorderRadius?: number;
    fontBase?: string;
    fontCode?: string;
    textColor?: string;
    textInverseColor?: string;
    textMutedColor?: string;
    barTextColor?: string;
    barSelectedColor?: string;
    barBg?: string;
    inputBg?: string;
    inputBorder?: string;
    inputTextColor?: string;
    inputBorderRadius?: number;
    brandTitle?: string;
    brandUrl?: string;
    brandImage?: string;
    gridCellSize?: number;
}
export type { CSSObject, Keyframes } from "./_modules/@emotion-core-types-index";
export type { StyledComponent } from "./_modules/@emotion-styled-types-index";
export { Global, keyframes, css, jsx, ClassNames } from "./_modules/@emotion-core-types-index";
export { default as isPropValid } from "./_modules/@emotion-is-prop-valid-types-index";
export { withTheme, useTheme, ThemeProvider } from "./_modules/emotion-theming-types-index";
export { darkenColor as darken, lightenColor as lighten, };
export {};